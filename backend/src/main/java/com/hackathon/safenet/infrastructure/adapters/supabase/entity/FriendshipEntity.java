package com.hackathon.safenet.infrastructure.adapters.supabase.entity;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.Instant;
import java.util.UUID;

/**
 * JPA Entity for Friendship table
 * Maps to the 'friendships' table in PostgreSQL/Supabase.
 * Represents accepted friend relationships between users.
 * Features:
 * - UUID primary key with auto-generation
 * - Foreign key relationships to UserEntity
 * - Bidirectional friendship representation
 * - Automatic timestamp management
 * - Unique constraint to prevent duplicate friendships
 */
@Entity
@Table(name = "friendships",
        indexes = {
                @Index(name = "idx_friendships_user1", columnList = "user1_id"),
                @Index(name = "idx_friendships_user2", columnList = "user2_id"),
                @Index(name = "idx_friendships_created", columnList = "created_at")
        },
        uniqueConstraints = {
                @UniqueConstraint(name = "uk_friendships_users",
                        columnNames = {"user1_id", "user2_id"})
        })
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class FriendshipEntity {

    /**
     * Primary key - UUID generated by database
     */
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id", updatable = false, nullable = false)
    private UUID id;

    /**
     * First user in the friendship (always the user with smaller UUID for consistency)
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user1_id", nullable = false)
    @NotNull(message = "User1 is required")
    private UserEntity user1;

    /**
     * Second user in the friendship (always the user with larger UUID for consistency)
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user2_id", nullable = false)
    @NotNull(message = "User2 is required")
    private UserEntity user2;

    /**
     * Record creation timestamp
     * Automatically set when friendship is created
     */
    @Column(name = "created_at", nullable = false, updatable = false)
    @Builder.Default
    private Instant createdAt = Instant.now();

    /**
     * JPA lifecycle callback - set timestamp before persist
     */
    @PrePersist
    protected void onCreate() {
        if (createdAt == null) {
            createdAt = Instant.now();
        }

        // Ensure user1 always has the smaller UUID for consistency
        if (user1 != null && user2 != null &&
                user1.getId().compareTo(user2.getId()) > 0) {
            UserEntity temp = user1;
            user1 = user2;
            user2 = temp;
        }
    }

    /**
     * Helper method to check if a user is part of this friendship
     *
     * @param userId the user ID to check
     * @return true if the user is part of this friendship
     */
    public boolean containsUser(UUID userId) {
        return (user1 != null && user1.getId().equals(userId)) ||
                (user2 != null && user2.getId().equals(userId));
    }

    /**
     * Helper method to get the other user in the friendship
     *
     * @param userId the user ID to get the friend of
     * @return the other user in the friendship, or null if the user is not part of this friendship
     */
    public UserEntity getOtherUser(UUID userId) {
        if (user1 != null && user1.getId().equals(userId)) {
            return user2;
        } else if (user2 != null && user2.getId().equals(userId)) {
            return user1;
        }
        return null;
    }
}