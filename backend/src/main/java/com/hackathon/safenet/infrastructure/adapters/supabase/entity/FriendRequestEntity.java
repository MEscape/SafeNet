package com.hackathon.safenet.infrastructure.adapters.supabase.entity;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.hibernate.annotations.UpdateTimestamp;

import java.time.Instant;
import java.util.UUID;

/**
 * JPA Entity for Friend Request table
 * Maps to the 'friend_requests' table in PostgreSQL/Supabase.
 * Represents friend requests between users with status tracking.
 * Features:
 * - UUID primary key with auto-generation
 * - Foreign key relationships to UserEntity
 * - Status tracking (PENDING, ACCEPTED, REJECTED)
 * - Automatic timestamp management
 * - Unique constraint to prevent duplicate requests
 */
@Entity
@Table(name = "friend_requests",
       indexes = {
           @Index(name = "idx_friend_requests_requester", columnList = "requester_id"),
           @Index(name = "idx_friend_requests_requested", columnList = "requested_id"),
           @Index(name = "idx_friend_requests_status", columnList = "status")
       },
       uniqueConstraints = {
           @UniqueConstraint(name = "uk_friend_requests_users", 
                           columnNames = {"requester_id", "requested_id"})
       })
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class FriendRequestEntity {

    /**
     * Primary key - UUID generated by database
     */
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id", updatable = false, nullable = false)
    private UUID id;

    /**
     * User who sent the friend request
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "requester_id", nullable = false)
    @NotNull(message = "Requester is required")
    private UserEntity requester;

    /**
     * User who received the friend request
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "requested_id", nullable = false)
    @NotNull(message = "Requested user is required")
    private UserEntity requested;

    /**
     * Status of the friend request
     */
    @Enumerated(EnumType.STRING)
    @Column(name = "status", nullable = false)
    @NotNull(message = "Status is required")
    @Builder.Default
    private FriendRequestStatus status = FriendRequestStatus.PENDING;

    /**
     * Record creation timestamp
     * Automatically set by database on insert
     */
    @Column(name = "created_at", nullable = false, updatable = false)
    @Builder.Default
    private Instant createdAt = Instant.now();

    /**
     * Record last update timestamp
     * Automatically updated by database trigger on update
     */
    @Column(name = "updated_at", nullable = false)
    @UpdateTimestamp
    @Builder.Default
    private Instant updatedAt = Instant.now();

    /**
     * JPA lifecycle callback - set timestamps before persist
     */
    @PrePersist
    protected void onCreate() {
        if (createdAt == null) {
            createdAt = Instant.now();
        }
        if (updatedAt == null) {
            updatedAt = Instant.now();
        }
    }

    /**
     * JPA lifecycle callback - update timestamp before update
     */
    @PreUpdate
    protected void onUpdate() {
        updatedAt = Instant.now();
    }

    /**
     * Enum for friend request status
     */
    public enum FriendRequestStatus {
        PENDING,    // Request sent but not yet responded to
        ACCEPTED,   // Request accepted - friendship created
        REJECTED    // Request rejected
    }
}