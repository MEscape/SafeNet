package com.hackathon.safenet.infrastructure.adapters.supabase.entity;

import jakarta.persistence.*;
import jakarta.validation.constraints.DecimalMax;
import jakarta.validation.constraints.DecimalMin;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.hibernate.annotations.UpdateTimestamp;

import java.math.BigDecimal;
import java.time.Instant;
import java.util.UUID;

/**
 * JPA Entity for User Location table
 * Maps to the 'user_locations' table in PostgreSQL/Supabase.
 * Represents real-time user location data with visibility controls.
 * Features:
 * - UUID primary key with auto-generation
 * - Foreign key relationship to UserEntity
 * - Latitude/Longitude coordinates with precision
 * - Visibility flag for privacy control
 * - Automatic timestamp management
 * - Accuracy and altitude tracking
 */
@Entity
@Table(name = "user_locations",
        indexes = {
                @Index(name = "idx_user_locations_user", columnList = "user_id"),
                @Index(name = "idx_user_locations_updated", columnList = "updated_at"),
                @Index(name = "idx_user_locations_visible", columnList = "visible_to_friends")
        })
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class UserLocationEntity {

    /**
     * Primary key - UUID generated by database
     */
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id", updatable = false, nullable = false)
    private UUID id;

    /**
     * User whose location this represents
     * One-to-one relationship as each user has only one current location
     */
    @OneToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false, unique = true)
    @NotNull(message = "User is required")
    private UserEntity user;

    /**
     * Latitude coordinate
     * Range: -90.0 to 90.0 degrees
     */
    @Column(name = "latitude", nullable = false, precision = 10, scale = 8)
    @NotNull(message = "Latitude is required")
    @DecimalMin(value = "-90.0", message = "Latitude must be between -90 and 90 degrees")
    @DecimalMax(value = "90.0", message = "Latitude must be between -90 and 90 degrees")
    private BigDecimal latitude;

    /**
     * Longitude coordinate
     * Range: -180.0 to 180.0 degrees
     */
    @Column(name = "longitude", nullable = false, precision = 11, scale = 8)
    @NotNull(message = "Longitude is required")
    @DecimalMin(value = "-180.0", message = "Longitude must be between -180 and 180 degrees")
    @DecimalMax(value = "180.0", message = "Longitude must be between -180 and 180 degrees")
    private BigDecimal longitude;

    /**
     * Altitude in meters (optional)
     */
    @Column(name = "altitude", precision = 8, scale = 2)
    private BigDecimal altitude;

    /**
     * Accuracy of the location in meters (optional)
     */
    @Column(name = "accuracy", precision = 8, scale = 2)
    private BigDecimal accuracy;

    /**
     * Whether this location is visible to friends
     * If false, location is still stored but not shared with friends
     */
    @Column(name = "visible_to_friends", nullable = false)
    @NotNull(message = "Visibility setting is required")
    @Builder.Default
    private Boolean visibleToFriends = true;

    /**
     * Record creation timestamp
     * Automatically set by database on insert
     */
    @Column(name = "created_at", nullable = false, updatable = false)
    @Builder.Default
    private Instant createdAt = Instant.now();

    /**
     * Record last update timestamp
     * Automatically updated by database trigger on update
     */
    @Column(name = "updated_at", nullable = false)
    @UpdateTimestamp
    @Builder.Default
    private Instant updatedAt = Instant.now();

    /**
     * JPA lifecycle callback - set timestamps before persist
     */
    @PrePersist
    protected void onCreate() {
        if (createdAt == null) {
            createdAt = Instant.now();
        }
        if (updatedAt == null) {
            updatedAt = Instant.now();
        }
    }

    /**
     * JPA lifecycle callback - update timestamp before update
     */
    @PreUpdate
    protected void onUpdate() {
        updatedAt = Instant.now();
    }

    /**
     * Helper method to check if location is recent (within last 5 minutes)
     *
     * @return true if location was updated within the last 5 minutes
     */
    public boolean isRecent() {
        return updatedAt != null &&
                updatedAt.isAfter(Instant.now().minusSeconds(300)); // 5 minutes
    }
}