package com.hackathon.safenet.domain.model;

import java.time.Instant;
import java.util.UUID;

/**
 * Immutable domain model representing a friend request between users.
 * Contains validation logic and business rules for friend requests.
 */
public record FriendRequest(
        UUID id,
        UUID requesterId,
        UUID requestedId,
        FriendRequestStatus status,
        Instant createdAt,
        Instant updatedAt
) {

    /**
     * Factory method for creating a new friend request
     *
     * @param requesterId ID of the user sending the request
     * @param requestedId ID of the user receiving the request
     * @return new friend request with PENDING status
     */
    public static FriendRequest create(UUID requesterId, UUID requestedId) {
        validateUsers(requesterId, requestedId);

        Instant now = Instant.now();
        return new FriendRequest(
                null, // ID will be generated by database
                requesterId,
                requestedId,
                FriendRequestStatus.PENDING,
                now,
                now
        );
    }

    /**
     * Accept this friend request
     *
     * @return new friend request with ACCEPTED status
     */
    public FriendRequest accept() {
        if (status != FriendRequestStatus.PENDING) {
            throw new IllegalStateException("Can only accept pending friend requests");
        }
        
        return new FriendRequest(
                id,
                requesterId,
                requestedId,
                FriendRequestStatus.ACCEPTED,
                createdAt,
                Instant.now()
        );
    }

    /**
     * Reject this friend request
     *
     * @return new friend request with REJECTED status
     */
    public FriendRequest reject() {
        if (status != FriendRequestStatus.PENDING) {
            throw new IllegalStateException("Can only reject pending friend requests");
        }
        
        return new FriendRequest(
                id,
                requesterId,
                requestedId,
                FriendRequestStatus.REJECTED,
                createdAt,
                Instant.now()
        );
    }

    /**
     * Reset this friend request to PENDING status
     * Used when a friendship is deleted and the request should be available for resending
     *
     * @return new friend request with PENDING status
     */
    public FriendRequest resetToPending() {
        return new FriendRequest(
                id,
                requesterId,
                requestedId,
                FriendRequestStatus.PENDING,
                createdAt,
                Instant.now()
        );
    }

    /**
     * Validate that users are different and not null
     */
    private static void validateUsers(UUID requesterId, UUID requestedId) {
        if (requesterId == null) {
            throw new IllegalArgumentException("Requester ID cannot be null");
        }
        if (requestedId == null) {
            throw new IllegalArgumentException("Requested user ID cannot be null");
        }
        if (requesterId.equals(requestedId)) {
            throw new IllegalArgumentException("Cannot send friend request to yourself");
        }
    }

    /**
     * Enum for friend request status
     */
    public enum FriendRequestStatus {
        PENDING,    // Request sent but not yet responded to
        ACCEPTED,   // Request accepted - friendship created
        REJECTED    // Request rejected
    }
}