package com.hackathon.safenet.domain.model;

import java.time.Instant;
import java.util.UUID;

/**
 * Immutable domain model representing a friendship between two users.
 * Contains validation logic and business rules for friendships.
 */
public record Friendship(
        UUID id,
        UUID user1Id,
        UUID user2Id,
        Instant createdAt
) {

    /**
     * Factory method for creating a new friendship
     *
     * @param user1Id ID of the first user
     * @param user2Id ID of the second user
     * @return new friendship with normalized user order
     */
    public static Friendship create(UUID user1Id, UUID user2Id) {
        validateUsers(user1Id, user2Id);
        
        // Normalize user order (smaller UUID first for consistency)
        UUID normalizedUser1Id = user1Id.compareTo(user2Id) < 0 ? user1Id : user2Id;
        UUID normalizedUser2Id = user1Id.compareTo(user2Id) < 0 ? user2Id : user1Id;
        
        return new Friendship(
                null, // ID will be generated by database
                normalizedUser1Id,
                normalizedUser2Id,
                Instant.now()
        );
    }

    /**
     * Check if this friendship involves a specific user
     *
     * @param userId the user ID to check
     * @return true if the user is part of this friendship
     */
    public boolean involvesUser(UUID userId) {
        return user1Id.equals(userId) || user2Id.equals(userId);
    }

    /**
     * Get the other user ID in this friendship
     *
     * @param userId the user ID to get the friend of
     * @return the other user ID, or null if the user is not part of this friendship
     */
    public UUID getOtherUserId(UUID userId) {
        if (user1Id.equals(userId)) {
            return user2Id;
        } else if (user2Id.equals(userId)) {
            return user1Id;
        }
        return null;
    }

    /**
     * Check if this friendship is between two specific users
     *
     * @param userId1 first user ID
     * @param userId2 second user ID
     * @return true if this friendship is between the two users
     */
    public boolean isBetween(UUID userId1, UUID userId2) {
        return (user1Id.equals(userId1) && user2Id.equals(userId2)) ||
               (user1Id.equals(userId2) && user2Id.equals(userId1));
    }

    /**
     * Check if this friendship is recent (created within the last hour)
     *
     * @return true if friendship was created within the last hour
     */
    public boolean isRecent() {
        return createdAt != null && 
               createdAt.isAfter(Instant.now().minusSeconds(3600)); // 1 hour
    }

    /**
     * Get the age of this friendship in days
     *
     * @return number of days since friendship was created
     */
    public long getAgeInDays() {
        if (createdAt == null) {
            return 0;
        }
        return java.time.Duration.between(createdAt, Instant.now()).toDays();
    }

    /**
     * Validate that users are different and not null
     */
    private static void validateUsers(UUID user1Id, UUID user2Id) {
        if (user1Id == null) {
            throw new IllegalArgumentException("User1 ID cannot be null");
        }
        if (user2Id == null) {
            throw new IllegalArgumentException("User2 ID cannot be null");
        }
        if (user1Id.equals(user2Id)) {
            throw new IllegalArgumentException("Cannot create friendship with yourself");
        }
    }
}